name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: npm ci
      
    - name: Type check
      run: npm run typecheck
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Test build
      run: npm run test:build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        VITE_GA_MEASUREMENT_ID: ${{ secrets.VITE_GA_MEASUREMENT_ID }}
        VITE_GOOGLE_ADS_CONVERSION_IDS: ${{ secrets.VITE_GOOGLE_ADS_CONVERSION_IDS }}

  deploy:
    name: Deploy to DigitalOcean
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      DO_APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Verify configuration
      run: |
        if [ -z "$DO_APP_ID" ]; then
          echo "Error: DIGITALOCEAN_APP_ID is not set"
          exit 1
        fi
        
    - name: Set up App Platform deployment
      run: |
        echo "Starting deployment to DigitalOcean App Platform..."
        deployment_id=$(doctl apps create-deployment $DO_APP_ID --wait --format ID --no-header)
        echo "DEPLOYMENT_ID=$deployment_id" >> $GITHUB_ENV
        
    - name: Monitor deployment
      run: |
        max_attempts=30
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          status=$(doctl apps get-deployment $DEPLOYMENT_ID --format Progress --no-header)
          
          case $status in
            "100")
              echo "‚úÖ Deployment successful!"
              exit 0
              ;;
            "error")
              echo "‚ùå Deployment failed"
              exit 1
              ;;
            *)
              echo "üîÑ Deployment in progress: $status%"
              ;;
          esac
          
          sleep 10
          attempt=$((attempt + 1))
        done
        
        echo "‚ùå Deployment timed out"
        exit 1

    - name: Health check
      if: success()
      run: |
        max_attempts=5
        attempt=1
        app_url=$(doctl apps get $DO_APP_ID --format DefaultIngress --no-header)
        
        while [ $attempt -le $max_attempts ]; do
          if curl -s -f "https://$app_url/health" > /dev/null; then
            echo "‚úÖ Application is healthy"
            exit 0
          else
            echo "‚ö†Ô∏è Health check failed, attempt $attempt of $max_attempts"
            sleep 10
          fi
          attempt=$((attempt + 1))
        done
        
        echo "‚ùå Health check failed after $max_attempts attempts"
        exit 1

    - name: Notify on Success
      if: success()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚úÖ Successfully deployed allervie-dashboard"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on Failure
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"‚ùå Deployment failed for allervie-dashboard"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}